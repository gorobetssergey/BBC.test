<?php

namespace app\models;

use Yii;
use yii\data\ActiveDataProvider;
use yii\data\Pagination;

/**
 * This is the model class for table "news".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $moderator_id
 * @property string $created_at
 * @property string $forbidden_at
 * @property string $title
 * @property string $text
 * @property integer $status
 *
 * @property User $user
 */
class News extends \yii\db\ActiveRecord
{
    const EVENT_NEWS_MODERATION_OK = 'newsModerationOk';
    const EVENT_CHECK_USER_NEWS = 'checkuserNews';

    const NEWS_NEW = 1;
    const NEWS_ACTIVE = 2;
    const NEWS_BLOCK = 3;

    const COUNT_PREWU = 5;
    const COUNT_NEWS = 2;

    public $allow;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'news';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'created_at', 'title', 'text', 'status'], 'required'],
            [['user_id', 'moderator_id', 'status'], 'integer'],
            ['title','unique'],
            [['created_at', 'forbidden_at'], 'safe'],
            [['text'], 'string', 'max' => 5000],
            [['title'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('site', 'ID'),
            'user_id' => Yii::t('site', 'user_id'),
            'moderator_id' => Yii::t('site', 'moderator_id'),
            'created_at' => Yii::t('site', 'created_at'),
            'forbidden_at' => Yii::t('site', 'forbidden_at'),
            'title' => Yii::t('site', 'title'),
            'text' => Yii::t('site', 'text'),
            'status' => Yii::t('site', 'status'),
            'allow' => 'Разрешить'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function newsModeration()
    {
        $this->trigger(self::EVENT_NEWS_MODERATION_OK);
    }

    public function newsModerationOk($event)
    {
        $this->checkuserNews($event->sender->id);
        (new SendMail())->sendAll([
            'id' => $event->sender->id,
            'title' => $event->sender->title
        ]);
    }

    public function checkuserNews($id)
    {
        $user = Profile::findAll(['window' => Profile::NOTICE]);
        foreach ($user as $item) {
            $data = new CheckUserNews();
            $data->user = $item->user;
            $data->news = $id;
            $data->save();
        }
    }

    private function getDataDefaul($params)
    {
        $this->status = ($params) ? self::NEWS_ACTIVE : self::NEWS_NEW;
        $this->created_at = date('Y-m-d H:i:s', strtotime('now'));
        $this->user_id = Yii::$app->user->identity->id;
        if($params):
            $this->forbidden_at = $this->created_at;
            $this->moderator_id = $this->user_id;
        endif;
    }
    public function saves($params)
    {
        $this->getDataDefaul($params);
        return parent::save($runValidation = true, $attributeNames = null); // TODO: Change the autogenerated stub
    }
    public function getProvider($params,$moderaion = false)
    {
        $query = self::find();
        if($params === true){
            if($moderaion === false){
                $query = $query->where(['status' => News::NEWS_ACTIVE]);
            }else{
                $query = $query->where(['in','status',[News::NEWS_NEW,News::NEWS_BLOCK]])->orderBy(['status'=>SORT_ASC]);
            }
        }else{
            $query = $query->where(['user_id' => Yii::$app->user->identity->id])->orderBy(['status'=>SORT_ASC]);
        }

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 25,
            ],
        ]);
        return $dataProvider;
    }

    public function getMyStatus($status) {
        if($status == News::NEWS_ACTIVE):
            return Yii::t('site','news_active');
        elseif($status == News::NEWS_BLOCK):
            return Yii::t('site','news_block');
        else:
            return Yii::t('site','news_new');
        endif;
    }
    public static function isMy($id)
    {
        $model = self::findOne(['id' => $id,'user-id' => Yii::$app->user->identity->id]);
        if($model != null)
            return $model;
        return null;
    }
    public static function getNewsPrewu($text)
    {
        $pieces = explode(" ", $text);
        $items = '';
        for($i = 0; $i<=self::COUNT_PREWU; $i++){
            $items .= ($pieces[$i].' ');
        }
        return $items;
    }
    public function getnewsActive($prevu = self::COUNT_NEWS)
    {
        $query = self::find()->where(['status' => News::NEWS_ACTIVE]);

        $pages = new Pagination([
            'defaultPageSize' => $prevu,
            'totalCount' => $query->count()
        ]);
        $models = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        $arr =[
            'models' => $models,
            'pages' => $pages,
        ];
        return $arr;
    }
    public function getNewsAllActive($arr)
    {
        $items = [
            'title' => $arr->title,
            'date' => $arr->created_at,
            'text' => $arr->text
        ];
        return $items;
    }
}
